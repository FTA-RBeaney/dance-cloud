import{a,u as e,p as r,b as s,o as t,j as o,e as i,h as n}from"../../../runtime.mjs";import{h as c}from"../../../_/database.mjs";import{h as l}from"../../../_/blob.mjs";import{r as m}from"../../../_/auth.mjs";import"../../../virtual/_commonjsHelpers.mjs";import"../../../_/index.mjs";import"../../../_/pathe.ff20891b.mjs";let u;function hubAI(){if(a("ai"),u)return u;const i=e().hub,n=r.env.AI||globalThis.__env__?.AI||globalThis.AI;if(i.remote&&i.projectUrl&&!n)return u=function(e,r){a("ai");const s=t.create({baseURL:o(e,"/api/_hub/ai"),method:"POST",headers:{Authorization:`Bearer ${r}`}});return{run:async(a,e)=>s("/run",{body:{model:a,params:e},responseType:e?.stream?"stream":void 0}).catch(handleProxyError)}}(i.projectUrl,i.projectSecretKey||i.userToken),u;if(n)return u=n,u;throw s("Missing Cloudflare AI binding (AI)")}async function handleProxyError(a){throw s({statusCode:a.statusCode,message:a.data?.message||a.message})}const f=i((async a=>{await m(a);const{version:r,cache:s,ai:t,analytics:o,blob:i,kv:u,database:f}=e().hub,[h,b,_,p]=await Promise.all([falseIfFail((()=>t&&hubAI().run("@cf/baai/bge-small-en-v1.5",{text:"check"}))),falseIfFail((()=>f&&c().exec("PRAGMA table_list"))),falseIfFail((()=>u&&n().getKeys("__check__"))),falseIfFail((()=>i&&l().list({prefix:"__check__"})))]);return{version:r,storage:{database:Boolean(b),kv:Array.isArray(_),blob:Array.isArray(p?.blobs)},features:{ai:Boolean(h),analytics:o,cache:s}}}));async function falseIfFail(a){try{const e=a();return e instanceof Promise?e.catch((()=>!1)):e}catch(a){return!1}}export{f as default};
//# sourceMappingURL=manifest.get.mjs.map
